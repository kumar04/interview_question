1. What are the scopes available in spring?
Singleton scope,prototype,requeest,session,global session
2. What is the difference between request and prototype scope?
If a scope is set to singleton, the Spring IoC container creates exactly one instance of the object defined by that bean definition. This single instance is stored in a cache of such singleton beans
In prototype scope, you will have a new instance for each getBean() method called.
request – Return a single bean instance per HTTP request. 
3. Why qualifier?
resolved conflict problem for Auto wired
4. What is DispatcherServlet?
The job of the DispatcherServlet is to take an incoming URI and find the right combination of handlers (generally methods on Controller classes) and views (generally JSPs) that combine to form the page or resource that's supposed to be found at that location.
Q.URL,URI,URN
A URI can be further classified as a locator, a name, or both. The term "Uniform Resource Locator" (URL) refers to the subset of URIs that, in addition to identifying a resource, provide a means of locating the resource by describing its primary access mechanism (e.g., its network "location"). The term "Uniform Resource Name" (URN) has been used historically to refer to both URIs under the "urn" scheme [RFC2141], which are required to remain globally unique and persistent even when the resource ceases to exist or becomes unavailable, and to any other URI with the properties of a name.
URI: foo
URL: http://some.domain.com/foo
URL: http://some.domain.com:8080/foo
URL: ftp://some.domain.com/fooURI: foo
URL: http://some.domain.com/foo
URL: http://some.domain.com:8080/foo
URL: ftp://some.domain.com/foo
5. How many view resolvers are there? 
InternalResourceViewResolver, ResourceBundleViewResolver and XmlViewResolver,PDFViewResolver
6. How to gather data from end user and store in DB?
command obj
7. How to integrate hibernate with spring?
step:
	create a data source
	inject data source with abstractsessionfactory
	inject abstractsessionfactory with hibernateTemplate
	inject hibernateTemplate with DAO class
8. Why AOP is required?
Apply cross cutting logic across the resource
11. What is the difference between BeanFactory and ApplicationContext?
 BeanFactory-Does not support the Annotation based dependency Injection.
 ApplicationContext--Support Annotation based dependency Injection.-@Autowired, @PreDestroy
 BeanFactory-Does not Support
ApplicationContext- Application contexts can publish events to beans that are registered as listeners
BeanFactory-Does not support way to access Message Bundle(internationalization (I18N) 
ApplicationContext-Support internationalization (I18N) messages.
BeanFactory-Doesn’t support.
ApplicationContext-Support  many enterprise services such JNDI access, EJB integration, remoting.
BeanFactory-By default its support Lazy loading
ApplicationContext-- its By default support Aggresive loading

13. How you implemented security in your project?
HttpClient ob
set username and passowrd
set httpClient authorization is true

Core java
1. What is object level and class level synchronization?
Object level locking is mechanism when you want to synchronize a non-static method or non-static code block such that only one thread will be able to execute the code block on given instance of the class. This should always be done to make instance level data thread safe
Class level locking prevents multiple threads to enter in synchronized block in any of all available instances on runtime. This means if in runtime there are 100 instances of  DemoClass, then only one thread will be able to execute demoMethod() in any one of instance at a time, and all other instances will be locked for other threads. This should always be done to make static data thread safe.
2. What is the difference between below case?
Final Map map=new HashMap();
map.add(1,”IT”);
map.put(2,”HR”);
and
String s=new String(“hello”);
S=”hey”;
first one is map reference variable is not final.
second is s value assign with hey
3. Internal of HashMap?
HashMap works on the principle of Hashing .  To understand Hashing , we should understand the three terms first   i.e  Hash Function , Hash Value and Bucket .
What is Hash Function , Hash Value  and Bucket ?
hashCode() function  which returns an integer value is the Hash function. The important point to note that ,  this method is present in Object class ( Mother of all class ) .
This is the code for the hash function(also known as hashCode method) in Object Class :
public native int hashCode();
The most important point to note from the above line :  hashCode method return  int value .
So the Hash value is the int value returned by the hash function .
So summarize the terms in the diagram below :
how hash  map works in java 
What is bucket ? 
A bucket is used to store key value pairs . A bucket can have multiple key-value pairs . In hash map, bucket used simple linked list to store objects .
4. What is collision?
When you insert the pair (10, 17) and then (10, 20), there is technically no collision involved. You are just replacing the old value with the new value or a given key 10 (since in both the cases, 10 is equal to 10 and also the hash code for 10 is always 10).
Collision happens when multiple keys hash to the same bucket. In that case, you need to make sure that you can distinguish between those keys. Chaining collision resolution is one of those techniques which is used for this.
5. What my class need to follow if it has to be added to map?
override equals and hashcode
6. What will happen?
Condition is my hashCode() always returns 1 and equal() always returns false..
Final Map<Emp,String> map=new HashMap<Emp,String>();
Emp e1=new Emp(1,”suchi”);
Emp e2=new Emp(1,”guguli”);
Emp e3=new Emp(1,”laali”);
map.put(e1,IT);
map.put(e2,IT);
map.put(e3,IT);
all add to hashmap
what will be the result? What will happen?
7. What will be the result of map.get(e2);
8. Difference between JVM,JRE,JDK?
9. What is the minimum requirement to run a java application?
10. Why java?
11. What are the basic feature of object oriented programming language?
12. What is difference between arrayList and linkedList?
Rest:
1. How to create a rest api?
2. Difference between query param and path param?
3. What is request body?
4. why rest over soap?
5. How to convert json data?


1. Why spring boot?
2. What is the internal of Spring boot?
14. write down how you are configuring JpaRepository according to springboot ?

1. What is Dialect?
2. Where you write configuration detail?
3. What is HQL? Have you ever used HQL in your project?
4. How to use L2 cache? 
5. Difference between l1 and l2 cache and where they are associate?
6. Difference between merge and update?
5. What is the use of @Transaction.
I think transactions belong on the Service layer. It's the one that knows about units of work and use cases. It's the right answer if you have several DAOs injected into a Service that need to work together in a single transaction.

ACID properties of transactions
ACID Properties. A transaction is a very small unit of a program and it may contain several lowlevel tasks. A transaction in a database system must maintain Atomicity, Consistency, Isolation, and Durability − commonly known as ACID properties − in order to ensure accuracy, completeness, and data integrity.
