Q.While overriding a exception throwing method, does it mandatory that subclass must also throw the same exception? 
Ans:
No
Q.)Difference b/w Checked & Unchecked Exception?
       Checked Exceptions deal compile time exception regarding the existence of  classes/interfaces
       But not syntax errors. 
	   Ex:  ClassNotFoundException---when use a NULL referenced variable to call any   
                                                       method/variable.
       InterruptedException,---when two or more threads try to share same Resource(wait() and join()) 
	   NoSuchFieldException ---when we access the undeclared variable
	   NoSuchMethodException---when we invoke the undeclared method.
	   InstantiationException---when we try to create object for a abstract/interface

	   Unchecked Exceptions deal runtime errors.
	   Ex: ArithmeticException, 
       ArrayOutOfBoundsException,
       NullPointerException
Q.Differenc b/w Exception & Error
Ans:
An Error "indicates serious problems that a reasonable application should not try to catch."
An Exception "indicates conditions that a reasonable application might want to catch."
Q. Difference between classNotFoundException and NoClassDefError in which situation we will face this?
in JavaClassNotFoundExceptionClassNotFoundException occurs when you try to load a class at runtime using Class.forName() or loadClass() 
methods and requested classes are not found in classpath. Most of the time this exception will occur when you try to run application
without updating classpath with JAR files. This exception is a checkedException derived from java.lang.Exception class and you need to 
provide explicit handling for it. This exception also occurs when you have two class loadersand if a ClassLoader tries to access a class 
which is loaded by another classloader in Java. You must be wondering that what actually is classloader in Java.Java ClassLoader is a part
of Java Runtime Environment that dynamically loads Java classes in JVM(Java Virtual Machine). The Java Runtime System does not need to 
know about files and files system because of classloaders.
below program will show ClassNotFoundExceptionpublic 
class Test {
public static void main(String args[]) {
try{Class.forName("Demo_Test");
}catch (ClassNotFoundException ex){
ex.printStackTrace();
}
}
}

NoClassDefFoundErrorNoClassDefFoundError occurs when class was present during compile time and program was compiled and linked 
successfully but class was not present during runtime. It is error which is derived from LinkageError. Linkage error occurs when a class
has some dependencies on another class and latter class changes after compilation of former class. NoClassFoundError is the result of 
implicit loading of class because of calling a method or accessing a variable from that class. This error is more difficult to debug 
and find the reason why this error occurred. So in this case you should always check the classes which are dependent on this class.
below program will show NoClassDefFoundError
class Demo{
void greeting(){
System.out.println("hello Java By Rahul");
}
}class Demo_Test {
public static void main(String args[]){
Demo d = new Demo();d.greeting();
}
}
Q.ClassNotFoundException Vs NoClassDefFoundError in Java
ClassNotFoundException occurs when you try to load a class at runtime using Class.forName() or loadClass() methods and requested 
classes are not found in classpath. Most of the time this exception will occur when you try to run application without updating 
classpath with JAR files. This exception is a checked Exception derived from java.lang.Exception class and you need to provide 
explicit handling for it. This exception also occurs when you have two class loaders and if a ClassLoader tries to access a class 
which is loaded by another classloader in Java. You must be wondering that what actually is classloader in Java. Java ClassLoader is a 
part of Java Runtime Environment that dynamically loads Java classes in JVM(Java Virtual Machine). The Java Runtime System does not 
need to know about files and files system because of classloaders.
